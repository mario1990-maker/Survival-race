<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Mini Arcade - Survival Race</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: Arial, sans-serif; background: #111; color: white; text-align: center; }
    #menu, #game-container { padding: 20px; }
    button { padding: 10px 20px; font-size: 18px; cursor: pointer; margin: 10px; }
    canvas { background: #222; display: block; margin: 20px auto; border: 2px solid white; }
    #score { font-size: 20px; margin-top: 10px; }
  </style>
</head>
<body>
  <div id="menu">
    <h1>Mini Arcade</h1>
    <button onclick="startGame()">Jogar Survival Race</button>
  </div>

  <div id="game-container" style="display:none">
    <canvas id="gameCanvas" width="600" height="400"></canvas>
    <div id="score">Pontuação: 0</div>
    <button onclick="backToMenu()">Voltar ao Menu</button>
  </div>

  <script>
    const menu = document.getElementById('menu');
    const gameContainer = document.getElementById('game-container');
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const scoreDisplay = document.getElementById('score');

    let player = { x: 50, y: 180, size: 30, speed: 5 };
    let obstacles = [];
    let score = 0;
    let gameRunning = false;
    let keys = {};
    let obstacleSpawnTimer = 0;
    let obstacleSpawnInterval = 90; // frames, para controlar spawn

    // Controle do teclado
    window.addEventListener('keydown', e => {
      keys[e.key] = true;
    });

    window.addEventListener('keyup', e => {
      keys[e.key] = false;
    });

    function startGame() {
      menu.style.display = 'none';
      gameContainer.style.display = 'block';
      player.y = 180;
      player.x = 50;
      obstacles = [];
      score = 0;
      gameRunning = true;
      keys = {};
      obstacleSpawnTimer = 0;
      scoreDisplay.textContent = 'Pontuação: 0';
      requestAnimationFrame(gameLoop);
    }

    function backToMenu() {
      gameRunning = false;
      menu.style.display = 'block';
      gameContainer.style.display = 'none';
    }

    function spawnObstacle() {
      const height = Math.random() * 80 + 20; // entre 20 e 100 px de altura
      const y = Math.random() * (canvas.height - height);
      obstacles.push({ x: canvas.width, y, width: 20, height, speed: 4 + Math.random() * 2 });
    }

    function drawPlayer() {
      ctx.fillStyle = 'cyan';
      ctx.fillRect(player.x, player.y, player.size, player.size);
    }

    function drawObstacles() {
      ctx.fillStyle = 'red';
      obstacles.forEach(obs => ctx.fillRect(obs.x, obs.y, obs.width, obs.height));
    }

    function checkCollision(rect1, rect2) {
      return !(rect1.x > rect2.x + rect2.width ||
               rect1.x + rect1.size < rect2.x ||
               rect1.y > rect2.y + rect2.height ||
               rect1.y + rect1.size < rect2.y);
    }

    function update() {
      // Movimento jogador
      if (keys['ArrowUp'] && player.y > 0) player.y -= player.speed;
      if (keys['ArrowDown'] && player.y + player.size < canvas.height) player.y += player.speed;
      if (keys['ArrowLeft'] && player.x > 0) player.x -= player.speed;
      if (keys['ArrowRight'] && player.x + player.size < canvas.width) player.x += player.speed;

      // Atualiza obstáculos
      obstacles.forEach(obs => {
        obs.x -= obs.speed;
      });

      // Remove obstáculos que saíram da tela e aumenta pontuação
      obstacles = obstacles.filter(obs => {
        if (obs.x + obs.width < 0) {
          score++;
          scoreDisplay.textContent = 'Pontuação: ' + score;
          return false;
        }
        return true;
      });

      // Spawn de obstáculos controlado pelo timer
      obstacleSpawnTimer++;
      if (obstacleSpawnTimer >= obstacleSpawnInterval) {
        spawnObstacle();
        obstacleSpawnTimer = 0;
        // Pode diminuir intervalo para aumentar dificuldade com o tempo:
        if (obstacleSpawnInterval > 30) obstacleSpawnInterval -= 0.5;
      }

      // Checar colisão
      for (let obs of obstacles) {
        if (checkCollision(player, obs)) {
          gameOver();
          break;
        }
      }
    }

    function clearCanvas() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    function gameOver() {
      gameRunning = false;
      alert('Fim de jogo! Sua pontuação: ' + score);
      backToMenu();
    }

    function gameLoop() {
      if (!gameRunning) return;

      clearCanvas();
      update();
      drawPlayer();
      drawObstacles();

      requestAnimationFrame(gameLoop);
    }
  </script>
</body>
</html>